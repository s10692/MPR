package org.example.db.dao;

import java.sql.Connection;




import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.example.db.DaoBase;
import org.example.db.EntityBase;
import org.example.db.HsqlUnitOfWork;
import org.example.library.Address;
import org.example.library.Books;
import org.example.library.Client;

public class HsqlBooksDao extends HsqlDaoBase<Books> implements BooksDao{

        
        public HsqlBooksDao(HsqlUnitOfWork uow) {
                super(uow);
        }

        public void setOrders(Books p) {
                
        }

        @Override
        protected void setUpdateQuery(Books ent) throws SQLException {

                update.setString(1, ent.getName());
                update.setString(2, ent.getDescription());
                update.setDouble(3, ent.getPrize());
                update.setInt(4, ent.getId());
                
        }

        @Override
        protected Books build(ResultSet rs) throws SQLException {

                Books p = new Books();
                p.setDescription(rs.getString("description"));
                p.setName(rs.getString("name"));
                p.setPrize(rs.getDouble("prize"));
                p.setId(rs.getInt("id"));
                return p;
        }

        @Override
        protected void setInsertQuery(Books ent) throws SQLException {
                insert.setString(1, ent.getName());
                insert.setString(2, ent.getDescription());
                insert.setDouble(3, ent.getPrize());
                
                
        }

        @Override
        protected String getTableName() {
                return "books";
        }

        @Override
        protected String getCreateQuery() {
                return "CREATE TABLE Books("
                                + "id bigint GENERATED BY DEFAULT AS IDENTITY,"
                                + "name VARCHAR(50),"
                                + "description VARCHAR(50),"
                                + "prize double,"
                                + ")";
        }

        @Override
        protected String getInsertQuery() {
                return "insert into books(name,description,prize) values (?,?,?)";
        }

        @Override
        protected String getUpdateQuery() {
                return "update books set"
                                + "(name,description,prize)=(?,?,?)"
                                + "where id=?";
        }
}