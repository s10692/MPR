package org.example.db.dao;

import java.sql.Connection;




import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.example.db.DaoBase;
import org.example.db.EntityBase;
import org.example.db.HsqlUnitOfWork;
import org.example.library.Address;
import org.example.library.Client;

public class HsqlClientDao extends HsqlDaoBase<Client> implements ClientDao{

        
        public HsqlClientDao(HsqlUnitOfWork uow) {
                super(uow);
        }

        public void setAddresses(Client c) {
                
        }

        public void setOrders(Client c) {
                
        }

        @Override
        protected void setUpdateQuery(Client ent) throws SQLException {

                update.setString(1, ent.getName());
                update.setString(2, ent.getSurname());
                update.setString(3, ent.getMail());
                update.setString(4, ent.getNumber());
                update.setInt(5, ent.getId());
                
        }

        @Override
        protected Client build(ResultSet rs) throws SQLException {

                Client c = new Client();
                c.setMail(rs.getString("mail"));
                c.setName(rs.getString("name"));
                c.setSurname(rs.getString("surname"));
                c.setNumber(rs.getString("number"));
                c.setId(rs.getInt("id"));
                return c;
        }

        @Override
        protected void setInsertQuery(Client ent) throws SQLException {
                insert.setString(1, ent.getName());
                insert.setString(2, ent.getSurname());
                insert.setString(3, ent.getMail());
                insert.setString(4, ent.getNumber());
                
                
        }

        @Override
        protected String getTableName() {
                return "client";
        }

        @Override
        protected String getCreateQuery() {
                return "CREATE TABLE Client("
                                + "id bigint GENERATED BY DEFAULT AS IDENTITY,"
                                + "name VARCHAR(50),"
                                + "surname VARCHAR(50),"
                                + "mail VARCHAR(50),"
                                + "number VARCHAR(50)"
                                + ")";
        }

        @Override
        protected String getInsertQuery() {
                return "insert into client(name,surname,mail,number) values (?,?,?,?)";
        }

        @Override
        protected String getUpdateQuery() {
                return "update client set"
                                + "(name,surname,mail,number)=(?,?,?,?)"
                                + "where id=?";
        }
}